# Autogenerated by onnx-pytorch.

import glob
import os
import math

import numpy as np
import torch
import torch.nn as nn
import torch.nn.functional as F
import torchvision


class Model(nn.Module):
  def __init__(self):
    super(Model, self).__init__()
    self._vars = nn.ParameterDict()
    self._regularizer_params = []
    for b in glob.glob(
        os.path.join(os.path.dirname(__file__), "variables", "*.npy")):
      v = torch.from_numpy(np.load(b))
      requires_grad = v.dtype.is_floating_point or v.dtype.is_complex
      self._vars[os.path.basename(b)[:-4]] = nn.Parameter(v, requires_grad=requires_grad)
    self.n_p2o_Conv_0 = nn.Conv2d(**{'groups': 1, 'dilation': [1, 1], 'out_channels': 32, 'padding': [1, 1], 'kernel_size': (3, 3), 'stride': [2, 2], 'in_channels': 3, 'bias': False})
    self.n_p2o_Conv_0.weight.data = self._vars["conv2d_0_w_0"]
    self.n_p2o_BatchNormalization_0 = nn.BatchNorm2d(**{'num_features': 32, 'eps': 9.999999747378752e-06, 'momentum': 0.8999999761581421})
    self.n_p2o_BatchNormalization_0.weight.data = self._vars["batch_norm2d_0_w_0"]
    self.n_p2o_BatchNormalization_0.bias.data = self._vars["batch_norm2d_0_b_0"]
    self.n_p2o_BatchNormalization_0.running_mean.data = self._vars["batch_norm2d_0_w_1"]
    self.n_p2o_BatchNormalization_0.running_var.data = self._vars["batch_norm2d_0_w_2"]
    self.n_p2o_Conv_1 = nn.Conv2d(**{'groups': 1, 'dilation': [1, 1], 'out_channels': 64, 'padding': [1, 1], 'kernel_size': (3, 3), 'stride': [2, 2], 'in_channels': 32, 'bias': False})
    self.n_p2o_Conv_1.weight.data = self._vars["conv2d_1_w_0"]
    self.n_p2o_BatchNormalization_1 = nn.BatchNorm2d(**{'num_features': 64, 'eps': 9.999999747378752e-06, 'momentum': 0.8999999761581421})
    self.n_p2o_BatchNormalization_1.weight.data = self._vars["batch_norm2d_1_w_0"]
    self.n_p2o_BatchNormalization_1.bias.data = self._vars["batch_norm2d_1_b_0"]
    self.n_p2o_BatchNormalization_1.running_mean.data = self._vars["batch_norm2d_1_w_1"]
    self.n_p2o_BatchNormalization_1.running_var.data = self._vars["batch_norm2d_1_w_2"]
    self.n_p2o_Conv_2 = nn.Conv2d(**{'groups': 1, 'dilation': [1, 1], 'out_channels': 128, 'padding': [0, 0], 'kernel_size': (1, 1), 'stride': [1, 1], 'in_channels': 64, 'bias': False})
    self.n_p2o_Conv_2.weight.data = self._vars["conv2d_3_w_0"]
    self.n_p2o_BatchNormalization_2 = nn.BatchNorm2d(**{'num_features': 128, 'eps': 9.999999747378752e-06, 'momentum': 0.8999999761581421})
    self.n_p2o_BatchNormalization_2.weight.data = self._vars["batch_norm2d_3_w_0"]
    self.n_p2o_BatchNormalization_2.bias.data = self._vars["batch_norm2d_3_b_0"]
    self.n_p2o_BatchNormalization_2.running_mean.data = self._vars["batch_norm2d_3_w_1"]
    self.n_p2o_BatchNormalization_2.running_var.data = self._vars["batch_norm2d_3_w_2"]
    self.n_p2o_Conv_3 = nn.Conv2d(**{'groups': 128, 'dilation': [1, 1], 'out_channels': 128, 'padding': [1, 1], 'kernel_size': (3, 3), 'stride': [2, 2], 'in_channels': 128, 'bias': False})
    self.n_p2o_Conv_3.weight.data = self._vars["conv2d_2_w_0"]
    self.n_p2o_BatchNormalization_3 = nn.BatchNorm2d(**{'num_features': 128, 'eps': 9.999999747378752e-06, 'momentum': 0.8999999761581421})
    self.n_p2o_BatchNormalization_3.weight.data = self._vars["batch_norm2d_2_w_0"]
    self.n_p2o_BatchNormalization_3.bias.data = self._vars["batch_norm2d_2_b_0"]
    self.n_p2o_BatchNormalization_3.running_mean.data = self._vars["batch_norm2d_2_w_1"]
    self.n_p2o_BatchNormalization_3.running_var.data = self._vars["batch_norm2d_2_w_2"]
    self.n_p2o_Conv_4 = nn.Conv2d(**{'groups': 1, 'dilation': [1, 1], 'out_channels': 64, 'padding': [1, 1], 'kernel_size': (3, 3), 'stride': [1, 1], 'in_channels': 128, 'bias': False})
    self.n_p2o_Conv_4.weight.data = self._vars["conv2d_4_w_0"]
    self.n_p2o_BatchNormalization_4 = nn.BatchNorm2d(**{'num_features': 64, 'eps': 9.999999747378752e-06, 'momentum': 0.8999999761581421})
    self.n_p2o_BatchNormalization_4.weight.data = self._vars["batch_norm2d_4_w_0"]
    self.n_p2o_BatchNormalization_4.bias.data = self._vars["batch_norm2d_4_b_0"]
    self.n_p2o_BatchNormalization_4.running_mean.data = self._vars["batch_norm2d_4_w_1"]
    self.n_p2o_BatchNormalization_4.running_var.data = self._vars["batch_norm2d_4_w_2"]
    self.n_p2o_Conv_5 = nn.Conv2d(**{'groups': 1, 'dilation': [1, 1], 'out_channels': 32, 'padding': [1, 1], 'kernel_size': (3, 3), 'stride': [1, 1], 'in_channels': 64, 'bias': False})
    self.n_p2o_Conv_5.weight.data = self._vars["conv2d_5_w_0"]
    self.n_p2o_BatchNormalization_5 = nn.BatchNorm2d(**{'num_features': 32, 'eps': 9.999999747378752e-06, 'momentum': 0.8999999761581421})
    self.n_p2o_BatchNormalization_5.weight.data = self._vars["batch_norm2d_5_w_0"]
    self.n_p2o_BatchNormalization_5.bias.data = self._vars["batch_norm2d_5_b_0"]
    self.n_p2o_BatchNormalization_5.running_mean.data = self._vars["batch_norm2d_5_w_1"]
    self.n_p2o_BatchNormalization_5.running_var.data = self._vars["batch_norm2d_5_w_2"]
    self.n_p2o_Conv_6 = nn.Conv2d(**{'groups': 1, 'dilation': [1, 1], 'out_channels': 32, 'padding': [1, 1], 'kernel_size': (3, 3), 'stride': [1, 1], 'in_channels': 32, 'bias': False})
    self.n_p2o_Conv_6.weight.data = self._vars["conv2d_6_w_0"]
    self.n_p2o_BatchNormalization_6 = nn.BatchNorm2d(**{'num_features': 32, 'eps': 9.999999747378752e-06, 'momentum': 0.8999999761581421})
    self.n_p2o_BatchNormalization_6.weight.data = self._vars["batch_norm2d_6_w_0"]
    self.n_p2o_BatchNormalization_6.bias.data = self._vars["batch_norm2d_6_b_0"]
    self.n_p2o_BatchNormalization_6.running_mean.data = self._vars["batch_norm2d_6_w_1"]
    self.n_p2o_BatchNormalization_6.running_var.data = self._vars["batch_norm2d_6_w_2"]
    self.n_p2o_AveragePool_0 = nn.AvgPool2d(**{'kernel_size': [3, 3], 'ceil_mode': False, 'stride': [2, 2], 'count_include_pad': False, 'padding': [1, 1]})
    self.n_p2o_Conv_7 = nn.Conv2d(**{'groups': 1, 'dilation': [1, 1], 'out_channels': 128, 'padding': [0, 0], 'kernel_size': (1, 1), 'stride': [1, 1], 'in_channels': 256, 'bias': False})
    self.n_p2o_Conv_7.weight.data = self._vars["conv2d_7_w_0"]
    self.n_p2o_BatchNormalization_7 = nn.BatchNorm2d(**{'num_features': 128, 'eps': 9.999999747378752e-06, 'momentum': 0.8999999761581421})
    self.n_p2o_BatchNormalization_7.weight.data = self._vars["batch_norm2d_7_w_0"]
    self.n_p2o_BatchNormalization_7.bias.data = self._vars["batch_norm2d_7_b_0"]
    self.n_p2o_BatchNormalization_7.running_mean.data = self._vars["batch_norm2d_7_w_1"]
    self.n_p2o_BatchNormalization_7.running_var.data = self._vars["batch_norm2d_7_w_2"]
    self.n_p2o_Conv_8 = nn.Conv2d(**{'groups': 1, 'dilation': [1, 1], 'out_channels': 64, 'padding': [1, 1], 'kernel_size': (3, 3), 'stride': [1, 1], 'in_channels': 128, 'bias': False})
    self.n_p2o_Conv_8.weight.data = self._vars["conv2d_8_w_0"]
    self.n_p2o_BatchNormalization_8 = nn.BatchNorm2d(**{'num_features': 64, 'eps': 9.999999747378752e-06, 'momentum': 0.8999999761581421})
    self.n_p2o_BatchNormalization_8.weight.data = self._vars["batch_norm2d_8_w_0"]
    self.n_p2o_BatchNormalization_8.bias.data = self._vars["batch_norm2d_8_b_0"]
    self.n_p2o_BatchNormalization_8.running_mean.data = self._vars["batch_norm2d_8_w_1"]
    self.n_p2o_BatchNormalization_8.running_var.data = self._vars["batch_norm2d_8_w_2"]
    self.n_p2o_Conv_9 = nn.Conv2d(**{'groups': 1, 'dilation': [1, 1], 'out_channels': 32, 'padding': [1, 1], 'kernel_size': (3, 3), 'stride': [1, 1], 'in_channels': 64, 'bias': False})
    self.n_p2o_Conv_9.weight.data = self._vars["conv2d_9_w_0"]
    self.n_p2o_BatchNormalization_9 = nn.BatchNorm2d(**{'num_features': 32, 'eps': 9.999999747378752e-06, 'momentum': 0.8999999761581421})
    self.n_p2o_BatchNormalization_9.weight.data = self._vars["batch_norm2d_9_w_0"]
    self.n_p2o_BatchNormalization_9.bias.data = self._vars["batch_norm2d_9_b_0"]
    self.n_p2o_BatchNormalization_9.running_mean.data = self._vars["batch_norm2d_9_w_1"]
    self.n_p2o_BatchNormalization_9.running_var.data = self._vars["batch_norm2d_9_w_2"]
    self.n_p2o_Conv_10 = nn.Conv2d(**{'groups': 1, 'dilation': [1, 1], 'out_channels': 32, 'padding': [1, 1], 'kernel_size': (3, 3), 'stride': [1, 1], 'in_channels': 32, 'bias': False})
    self.n_p2o_Conv_10.weight.data = self._vars["conv2d_10_w_0"]
    self.n_p2o_BatchNormalization_10 = nn.BatchNorm2d(**{'num_features': 32, 'eps': 9.999999747378752e-06, 'momentum': 0.8999999761581421})
    self.n_p2o_BatchNormalization_10.weight.data = self._vars["batch_norm2d_10_w_0"]
    self.n_p2o_BatchNormalization_10.bias.data = self._vars["batch_norm2d_10_b_0"]
    self.n_p2o_BatchNormalization_10.running_mean.data = self._vars["batch_norm2d_10_w_1"]
    self.n_p2o_BatchNormalization_10.running_var.data = self._vars["batch_norm2d_10_w_2"]
    self.n_p2o_Conv_11 = nn.Conv2d(**{'groups': 1, 'dilation': [1, 1], 'out_channels': 256, 'padding': [0, 0], 'kernel_size': (1, 1), 'stride': [1, 1], 'in_channels': 256, 'bias': False})
    self.n_p2o_Conv_11.weight.data = self._vars["conv2d_12_w_0"]
    self.n_p2o_BatchNormalization_11 = nn.BatchNorm2d(**{'num_features': 256, 'eps': 9.999999747378752e-06, 'momentum': 0.8999999761581421})
    self.n_p2o_BatchNormalization_11.weight.data = self._vars["batch_norm2d_12_w_0"]
    self.n_p2o_BatchNormalization_11.bias.data = self._vars["batch_norm2d_12_b_0"]
    self.n_p2o_BatchNormalization_11.running_mean.data = self._vars["batch_norm2d_12_w_1"]
    self.n_p2o_BatchNormalization_11.running_var.data = self._vars["batch_norm2d_12_w_2"]
    self.n_p2o_Conv_12 = nn.Conv2d(**{'groups': 256, 'dilation': [1, 1], 'out_channels': 256, 'padding': [1, 1], 'kernel_size': (3, 3), 'stride': [2, 2], 'in_channels': 256, 'bias': False})
    self.n_p2o_Conv_12.weight.data = self._vars["conv2d_11_w_0"]
    self.n_p2o_BatchNormalization_12 = nn.BatchNorm2d(**{'num_features': 256, 'eps': 9.999999747378752e-06, 'momentum': 0.8999999761581421})
    self.n_p2o_BatchNormalization_12.weight.data = self._vars["batch_norm2d_11_w_0"]
    self.n_p2o_BatchNormalization_12.bias.data = self._vars["batch_norm2d_11_b_0"]
    self.n_p2o_BatchNormalization_12.running_mean.data = self._vars["batch_norm2d_11_w_1"]
    self.n_p2o_BatchNormalization_12.running_var.data = self._vars["batch_norm2d_11_w_2"]
    self.n_p2o_Conv_13 = nn.Conv2d(**{'groups': 1, 'dilation': [1, 1], 'out_channels': 128, 'padding': [1, 1], 'kernel_size': (3, 3), 'stride': [1, 1], 'in_channels': 256, 'bias': False})
    self.n_p2o_Conv_13.weight.data = self._vars["conv2d_13_w_0"]
    self.n_p2o_BatchNormalization_13 = nn.BatchNorm2d(**{'num_features': 128, 'eps': 9.999999747378752e-06, 'momentum': 0.8999999761581421})
    self.n_p2o_BatchNormalization_13.weight.data = self._vars["batch_norm2d_13_w_0"]
    self.n_p2o_BatchNormalization_13.bias.data = self._vars["batch_norm2d_13_b_0"]
    self.n_p2o_BatchNormalization_13.running_mean.data = self._vars["batch_norm2d_13_w_1"]
    self.n_p2o_BatchNormalization_13.running_var.data = self._vars["batch_norm2d_13_w_2"]
    self.n_p2o_Conv_14 = nn.Conv2d(**{'groups': 1, 'dilation': [1, 1], 'out_channels': 64, 'padding': [1, 1], 'kernel_size': (3, 3), 'stride': [1, 1], 'in_channels': 128, 'bias': False})
    self.n_p2o_Conv_14.weight.data = self._vars["conv2d_14_w_0"]
    self.n_p2o_BatchNormalization_14 = nn.BatchNorm2d(**{'num_features': 64, 'eps': 9.999999747378752e-06, 'momentum': 0.8999999761581421})
    self.n_p2o_BatchNormalization_14.weight.data = self._vars["batch_norm2d_14_w_0"]
    self.n_p2o_BatchNormalization_14.bias.data = self._vars["batch_norm2d_14_b_0"]
    self.n_p2o_BatchNormalization_14.running_mean.data = self._vars["batch_norm2d_14_w_1"]
    self.n_p2o_BatchNormalization_14.running_var.data = self._vars["batch_norm2d_14_w_2"]
    self.n_p2o_Conv_15 = nn.Conv2d(**{'groups': 1, 'dilation': [1, 1], 'out_channels': 64, 'padding': [1, 1], 'kernel_size': (3, 3), 'stride': [1, 1], 'in_channels': 64, 'bias': False})
    self.n_p2o_Conv_15.weight.data = self._vars["conv2d_15_w_0"]
    self.n_p2o_BatchNormalization_15 = nn.BatchNorm2d(**{'num_features': 64, 'eps': 9.999999747378752e-06, 'momentum': 0.8999999761581421})
    self.n_p2o_BatchNormalization_15.weight.data = self._vars["batch_norm2d_15_w_0"]
    self.n_p2o_BatchNormalization_15.bias.data = self._vars["batch_norm2d_15_b_0"]
    self.n_p2o_BatchNormalization_15.running_mean.data = self._vars["batch_norm2d_15_w_1"]
    self.n_p2o_BatchNormalization_15.running_var.data = self._vars["batch_norm2d_15_w_2"]
    self.n_p2o_AveragePool_2 = nn.AvgPool2d(**{'kernel_size': [3, 3], 'ceil_mode': False, 'stride': [2, 2], 'count_include_pad': False, 'padding': [1, 1]})
    self.n_p2o_Conv_16 = nn.Conv2d(**{'groups': 1, 'dilation': [1, 1], 'out_channels': 256, 'padding': [0, 0], 'kernel_size': (1, 1), 'stride': [1, 1], 'in_channels': 512, 'bias': False})
    self.n_p2o_Conv_16.weight.data = self._vars["conv2d_16_w_0"]
    self.n_p2o_BatchNormalization_16 = nn.BatchNorm2d(**{'num_features': 256, 'eps': 9.999999747378752e-06, 'momentum': 0.8999999761581421})
    self.n_p2o_BatchNormalization_16.weight.data = self._vars["batch_norm2d_16_w_0"]
    self.n_p2o_BatchNormalization_16.bias.data = self._vars["batch_norm2d_16_b_0"]
    self.n_p2o_BatchNormalization_16.running_mean.data = self._vars["batch_norm2d_16_w_1"]
    self.n_p2o_BatchNormalization_16.running_var.data = self._vars["batch_norm2d_16_w_2"]
    self.n_p2o_Conv_17 = nn.Conv2d(**{'groups': 1, 'dilation': [1, 1], 'out_channels': 128, 'padding': [1, 1], 'kernel_size': (3, 3), 'stride': [1, 1], 'in_channels': 256, 'bias': False})
    self.n_p2o_Conv_17.weight.data = self._vars["conv2d_17_w_0"]
    self.n_p2o_BatchNormalization_17 = nn.BatchNorm2d(**{'num_features': 128, 'eps': 9.999999747378752e-06, 'momentum': 0.8999999761581421})
    self.n_p2o_BatchNormalization_17.weight.data = self._vars["batch_norm2d_17_w_0"]
    self.n_p2o_BatchNormalization_17.bias.data = self._vars["batch_norm2d_17_b_0"]
    self.n_p2o_BatchNormalization_17.running_mean.data = self._vars["batch_norm2d_17_w_1"]
    self.n_p2o_BatchNormalization_17.running_var.data = self._vars["batch_norm2d_17_w_2"]
    self.n_p2o_Conv_18 = nn.Conv2d(**{'groups': 1, 'dilation': [1, 1], 'out_channels': 64, 'padding': [1, 1], 'kernel_size': (3, 3), 'stride': [1, 1], 'in_channels': 128, 'bias': False})
    self.n_p2o_Conv_18.weight.data = self._vars["conv2d_18_w_0"]
    self.n_p2o_BatchNormalization_18 = nn.BatchNorm2d(**{'num_features': 64, 'eps': 9.999999747378752e-06, 'momentum': 0.8999999761581421})
    self.n_p2o_BatchNormalization_18.weight.data = self._vars["batch_norm2d_18_w_0"]
    self.n_p2o_BatchNormalization_18.bias.data = self._vars["batch_norm2d_18_b_0"]
    self.n_p2o_BatchNormalization_18.running_mean.data = self._vars["batch_norm2d_18_w_1"]
    self.n_p2o_BatchNormalization_18.running_var.data = self._vars["batch_norm2d_18_w_2"]
    self.n_p2o_Conv_19 = nn.Conv2d(**{'groups': 1, 'dilation': [1, 1], 'out_channels': 64, 'padding': [1, 1], 'kernel_size': (3, 3), 'stride': [1, 1], 'in_channels': 64, 'bias': False})
    self.n_p2o_Conv_19.weight.data = self._vars["conv2d_19_w_0"]
    self.n_p2o_BatchNormalization_19 = nn.BatchNorm2d(**{'num_features': 64, 'eps': 9.999999747378752e-06, 'momentum': 0.8999999761581421})
    self.n_p2o_BatchNormalization_19.weight.data = self._vars["batch_norm2d_19_w_0"]
    self.n_p2o_BatchNormalization_19.bias.data = self._vars["batch_norm2d_19_b_0"]
    self.n_p2o_BatchNormalization_19.running_mean.data = self._vars["batch_norm2d_19_w_1"]
    self.n_p2o_BatchNormalization_19.running_var.data = self._vars["batch_norm2d_19_w_2"]
    self.n_p2o_Conv_20 = nn.Conv2d(**{'groups': 1, 'dilation': [1, 1], 'out_channels': 512, 'padding': [0, 0], 'kernel_size': (1, 1), 'stride': [1, 1], 'in_channels': 512, 'bias': False})
    self.n_p2o_Conv_20.weight.data = self._vars["conv2d_21_w_0"]
    self.n_p2o_BatchNormalization_20 = nn.BatchNorm2d(**{'num_features': 512, 'eps': 9.999999747378752e-06, 'momentum': 0.8999999761581421})
    self.n_p2o_BatchNormalization_20.weight.data = self._vars["batch_norm2d_21_w_0"]
    self.n_p2o_BatchNormalization_20.bias.data = self._vars["batch_norm2d_21_b_0"]
    self.n_p2o_BatchNormalization_20.running_mean.data = self._vars["batch_norm2d_21_w_1"]
    self.n_p2o_BatchNormalization_20.running_var.data = self._vars["batch_norm2d_21_w_2"]
    self.n_p2o_Conv_21 = nn.Conv2d(**{'groups': 512, 'dilation': [1, 1], 'out_channels': 512, 'padding': [1, 1], 'kernel_size': (3, 3), 'stride': [2, 2], 'in_channels': 512, 'bias': False})
    self.n_p2o_Conv_21.weight.data = self._vars["conv2d_20_w_0"]
    self.n_p2o_BatchNormalization_21 = nn.BatchNorm2d(**{'num_features': 512, 'eps': 9.999999747378752e-06, 'momentum': 0.8999999761581421})
    self.n_p2o_BatchNormalization_21.weight.data = self._vars["batch_norm2d_20_w_0"]
    self.n_p2o_BatchNormalization_21.bias.data = self._vars["batch_norm2d_20_b_0"]
    self.n_p2o_BatchNormalization_21.running_mean.data = self._vars["batch_norm2d_20_w_1"]
    self.n_p2o_BatchNormalization_21.running_var.data = self._vars["batch_norm2d_20_w_2"]
    self.n_p2o_Conv_22 = nn.Conv2d(**{'groups': 1, 'dilation': [1, 1], 'out_channels': 256, 'padding': [1, 1], 'kernel_size': (3, 3), 'stride': [1, 1], 'in_channels': 512, 'bias': False})
    self.n_p2o_Conv_22.weight.data = self._vars["conv2d_22_w_0"]
    self.n_p2o_BatchNormalization_22 = nn.BatchNorm2d(**{'num_features': 256, 'eps': 9.999999747378752e-06, 'momentum': 0.8999999761581421})
    self.n_p2o_BatchNormalization_22.weight.data = self._vars["batch_norm2d_22_w_0"]
    self.n_p2o_BatchNormalization_22.bias.data = self._vars["batch_norm2d_22_b_0"]
    self.n_p2o_BatchNormalization_22.running_mean.data = self._vars["batch_norm2d_22_w_1"]
    self.n_p2o_BatchNormalization_22.running_var.data = self._vars["batch_norm2d_22_w_2"]
    self.n_p2o_Conv_23 = nn.Conv2d(**{'groups': 1, 'dilation': [1, 1], 'out_channels': 128, 'padding': [1, 1], 'kernel_size': (3, 3), 'stride': [1, 1], 'in_channels': 256, 'bias': False})
    self.n_p2o_Conv_23.weight.data = self._vars["conv2d_23_w_0"]
    self.n_p2o_BatchNormalization_23 = nn.BatchNorm2d(**{'num_features': 128, 'eps': 9.999999747378752e-06, 'momentum': 0.8999999761581421})
    self.n_p2o_BatchNormalization_23.weight.data = self._vars["batch_norm2d_23_w_0"]
    self.n_p2o_BatchNormalization_23.bias.data = self._vars["batch_norm2d_23_b_0"]
    self.n_p2o_BatchNormalization_23.running_mean.data = self._vars["batch_norm2d_23_w_1"]
    self.n_p2o_BatchNormalization_23.running_var.data = self._vars["batch_norm2d_23_w_2"]
    self.n_p2o_Conv_24 = nn.Conv2d(**{'groups': 1, 'dilation': [1, 1], 'out_channels': 128, 'padding': [1, 1], 'kernel_size': (3, 3), 'stride': [1, 1], 'in_channels': 128, 'bias': False})
    self.n_p2o_Conv_24.weight.data = self._vars["conv2d_24_w_0"]
    self.n_p2o_BatchNormalization_24 = nn.BatchNorm2d(**{'num_features': 128, 'eps': 9.999999747378752e-06, 'momentum': 0.8999999761581421})
    self.n_p2o_BatchNormalization_24.weight.data = self._vars["batch_norm2d_24_w_0"]
    self.n_p2o_BatchNormalization_24.bias.data = self._vars["batch_norm2d_24_b_0"]
    self.n_p2o_BatchNormalization_24.running_mean.data = self._vars["batch_norm2d_24_w_1"]
    self.n_p2o_BatchNormalization_24.running_var.data = self._vars["batch_norm2d_24_w_2"]
    self.n_p2o_AveragePool_4 = nn.AvgPool2d(**{'kernel_size': [3, 3], 'ceil_mode': False, 'stride': [2, 2], 'count_include_pad': False, 'padding': [1, 1]})
    self.n_p2o_Conv_25 = nn.Conv2d(**{'groups': 1, 'dilation': [1, 1], 'out_channels': 512, 'padding': [0, 0], 'kernel_size': (1, 1), 'stride': [1, 1], 'in_channels': 1024, 'bias': False})
    self.n_p2o_Conv_25.weight.data = self._vars["conv2d_25_w_0"]
    self.n_p2o_BatchNormalization_25 = nn.BatchNorm2d(**{'num_features': 512, 'eps': 9.999999747378752e-06, 'momentum': 0.8999999761581421})
    self.n_p2o_BatchNormalization_25.weight.data = self._vars["batch_norm2d_25_w_0"]
    self.n_p2o_BatchNormalization_25.bias.data = self._vars["batch_norm2d_25_b_0"]
    self.n_p2o_BatchNormalization_25.running_mean.data = self._vars["batch_norm2d_25_w_1"]
    self.n_p2o_BatchNormalization_25.running_var.data = self._vars["batch_norm2d_25_w_2"]
    self.n_p2o_Conv_26 = nn.Conv2d(**{'groups': 1, 'dilation': [1, 1], 'out_channels': 256, 'padding': [1, 1], 'kernel_size': (3, 3), 'stride': [1, 1], 'in_channels': 512, 'bias': False})
    self.n_p2o_Conv_26.weight.data = self._vars["conv2d_26_w_0"]
    self.n_p2o_BatchNormalization_26 = nn.BatchNorm2d(**{'num_features': 256, 'eps': 9.999999747378752e-06, 'momentum': 0.8999999761581421})
    self.n_p2o_BatchNormalization_26.weight.data = self._vars["batch_norm2d_26_w_0"]
    self.n_p2o_BatchNormalization_26.bias.data = self._vars["batch_norm2d_26_b_0"]
    self.n_p2o_BatchNormalization_26.running_mean.data = self._vars["batch_norm2d_26_w_1"]
    self.n_p2o_BatchNormalization_26.running_var.data = self._vars["batch_norm2d_26_w_2"]
    self.n_p2o_Conv_27 = nn.Conv2d(**{'groups': 1, 'dilation': [1, 1], 'out_channels': 128, 'padding': [1, 1], 'kernel_size': (3, 3), 'stride': [1, 1], 'in_channels': 256, 'bias': False})
    self.n_p2o_Conv_27.weight.data = self._vars["conv2d_27_w_0"]
    self.n_p2o_BatchNormalization_27 = nn.BatchNorm2d(**{'num_features': 128, 'eps': 9.999999747378752e-06, 'momentum': 0.8999999761581421})
    self.n_p2o_BatchNormalization_27.weight.data = self._vars["batch_norm2d_27_w_0"]
    self.n_p2o_BatchNormalization_27.bias.data = self._vars["batch_norm2d_27_b_0"]
    self.n_p2o_BatchNormalization_27.running_mean.data = self._vars["batch_norm2d_27_w_1"]
    self.n_p2o_BatchNormalization_27.running_var.data = self._vars["batch_norm2d_27_w_2"]
    self.n_p2o_Conv_28 = nn.Conv2d(**{'groups': 1, 'dilation': [1, 1], 'out_channels': 128, 'padding': [1, 1], 'kernel_size': (3, 3), 'stride': [1, 1], 'in_channels': 128, 'bias': False})
    self.n_p2o_Conv_28.weight.data = self._vars["conv2d_28_w_0"]
    self.n_p2o_BatchNormalization_28 = nn.BatchNorm2d(**{'num_features': 128, 'eps': 9.999999747378752e-06, 'momentum': 0.8999999761581421})
    self.n_p2o_BatchNormalization_28.weight.data = self._vars["batch_norm2d_28_w_0"]
    self.n_p2o_BatchNormalization_28.bias.data = self._vars["batch_norm2d_28_b_0"]
    self.n_p2o_BatchNormalization_28.running_mean.data = self._vars["batch_norm2d_28_w_1"]
    self.n_p2o_BatchNormalization_28.running_var.data = self._vars["batch_norm2d_28_w_2"]

  def forward(self, *inputs):
    x, = inputs
    batch_norm2d_0_b_0 = self._vars['batch_norm2d_0_b_0']
    batch_norm2d_0_w_0 = self._vars['batch_norm2d_0_w_0']
    batch_norm2d_0_w_1 = self._vars['batch_norm2d_0_w_1']
    batch_norm2d_0_w_2 = self._vars['batch_norm2d_0_w_2']
    batch_norm2d_1_b_0 = self._vars['batch_norm2d_1_b_0']
    batch_norm2d_1_w_0 = self._vars['batch_norm2d_1_w_0']
    batch_norm2d_1_w_1 = self._vars['batch_norm2d_1_w_1']
    batch_norm2d_1_w_2 = self._vars['batch_norm2d_1_w_2']
    batch_norm2d_10_b_0 = self._vars['batch_norm2d_10_b_0']
    batch_norm2d_10_w_0 = self._vars['batch_norm2d_10_w_0']
    batch_norm2d_10_w_1 = self._vars['batch_norm2d_10_w_1']
    batch_norm2d_10_w_2 = self._vars['batch_norm2d_10_w_2']
    batch_norm2d_11_b_0 = self._vars['batch_norm2d_11_b_0']
    batch_norm2d_11_w_0 = self._vars['batch_norm2d_11_w_0']
    batch_norm2d_11_w_1 = self._vars['batch_norm2d_11_w_1']
    batch_norm2d_11_w_2 = self._vars['batch_norm2d_11_w_2']
    batch_norm2d_12_b_0 = self._vars['batch_norm2d_12_b_0']
    batch_norm2d_12_w_0 = self._vars['batch_norm2d_12_w_0']
    batch_norm2d_12_w_1 = self._vars['batch_norm2d_12_w_1']
    batch_norm2d_12_w_2 = self._vars['batch_norm2d_12_w_2']
    batch_norm2d_13_b_0 = self._vars['batch_norm2d_13_b_0']
    batch_norm2d_13_w_0 = self._vars['batch_norm2d_13_w_0']
    batch_norm2d_13_w_1 = self._vars['batch_norm2d_13_w_1']
    batch_norm2d_13_w_2 = self._vars['batch_norm2d_13_w_2']
    batch_norm2d_14_b_0 = self._vars['batch_norm2d_14_b_0']
    batch_norm2d_14_w_0 = self._vars['batch_norm2d_14_w_0']
    batch_norm2d_14_w_1 = self._vars['batch_norm2d_14_w_1']
    batch_norm2d_14_w_2 = self._vars['batch_norm2d_14_w_2']
    batch_norm2d_15_b_0 = self._vars['batch_norm2d_15_b_0']
    batch_norm2d_15_w_0 = self._vars['batch_norm2d_15_w_0']
    batch_norm2d_15_w_1 = self._vars['batch_norm2d_15_w_1']
    batch_norm2d_15_w_2 = self._vars['batch_norm2d_15_w_2']
    batch_norm2d_16_b_0 = self._vars['batch_norm2d_16_b_0']
    batch_norm2d_16_w_0 = self._vars['batch_norm2d_16_w_0']
    batch_norm2d_16_w_1 = self._vars['batch_norm2d_16_w_1']
    batch_norm2d_16_w_2 = self._vars['batch_norm2d_16_w_2']
    batch_norm2d_17_b_0 = self._vars['batch_norm2d_17_b_0']
    batch_norm2d_17_w_0 = self._vars['batch_norm2d_17_w_0']
    batch_norm2d_17_w_1 = self._vars['batch_norm2d_17_w_1']
    batch_norm2d_17_w_2 = self._vars['batch_norm2d_17_w_2']
    batch_norm2d_18_b_0 = self._vars['batch_norm2d_18_b_0']
    batch_norm2d_18_w_0 = self._vars['batch_norm2d_18_w_0']
    batch_norm2d_18_w_1 = self._vars['batch_norm2d_18_w_1']
    batch_norm2d_18_w_2 = self._vars['batch_norm2d_18_w_2']
    batch_norm2d_19_b_0 = self._vars['batch_norm2d_19_b_0']
    batch_norm2d_19_w_0 = self._vars['batch_norm2d_19_w_0']
    batch_norm2d_19_w_1 = self._vars['batch_norm2d_19_w_1']
    batch_norm2d_19_w_2 = self._vars['batch_norm2d_19_w_2']
    batch_norm2d_2_b_0 = self._vars['batch_norm2d_2_b_0']
    batch_norm2d_2_w_0 = self._vars['batch_norm2d_2_w_0']
    batch_norm2d_2_w_1 = self._vars['batch_norm2d_2_w_1']
    batch_norm2d_2_w_2 = self._vars['batch_norm2d_2_w_2']
    batch_norm2d_20_b_0 = self._vars['batch_norm2d_20_b_0']
    batch_norm2d_20_w_0 = self._vars['batch_norm2d_20_w_0']
    batch_norm2d_20_w_1 = self._vars['batch_norm2d_20_w_1']
    batch_norm2d_20_w_2 = self._vars['batch_norm2d_20_w_2']
    batch_norm2d_21_b_0 = self._vars['batch_norm2d_21_b_0']
    batch_norm2d_21_w_0 = self._vars['batch_norm2d_21_w_0']
    batch_norm2d_21_w_1 = self._vars['batch_norm2d_21_w_1']
    batch_norm2d_21_w_2 = self._vars['batch_norm2d_21_w_2']
    batch_norm2d_22_b_0 = self._vars['batch_norm2d_22_b_0']
    batch_norm2d_22_w_0 = self._vars['batch_norm2d_22_w_0']
    batch_norm2d_22_w_1 = self._vars['batch_norm2d_22_w_1']
    batch_norm2d_22_w_2 = self._vars['batch_norm2d_22_w_2']
    batch_norm2d_23_b_0 = self._vars['batch_norm2d_23_b_0']
    batch_norm2d_23_w_0 = self._vars['batch_norm2d_23_w_0']
    batch_norm2d_23_w_1 = self._vars['batch_norm2d_23_w_1']
    batch_norm2d_23_w_2 = self._vars['batch_norm2d_23_w_2']
    batch_norm2d_24_b_0 = self._vars['batch_norm2d_24_b_0']
    batch_norm2d_24_w_0 = self._vars['batch_norm2d_24_w_0']
    batch_norm2d_24_w_1 = self._vars['batch_norm2d_24_w_1']
    batch_norm2d_24_w_2 = self._vars['batch_norm2d_24_w_2']
    batch_norm2d_25_b_0 = self._vars['batch_norm2d_25_b_0']
    batch_norm2d_25_w_0 = self._vars['batch_norm2d_25_w_0']
    batch_norm2d_25_w_1 = self._vars['batch_norm2d_25_w_1']
    batch_norm2d_25_w_2 = self._vars['batch_norm2d_25_w_2']
    batch_norm2d_26_b_0 = self._vars['batch_norm2d_26_b_0']
    batch_norm2d_26_w_0 = self._vars['batch_norm2d_26_w_0']
    batch_norm2d_26_w_1 = self._vars['batch_norm2d_26_w_1']
    batch_norm2d_26_w_2 = self._vars['batch_norm2d_26_w_2']
    batch_norm2d_27_b_0 = self._vars['batch_norm2d_27_b_0']
    batch_norm2d_27_w_0 = self._vars['batch_norm2d_27_w_0']
    batch_norm2d_27_w_1 = self._vars['batch_norm2d_27_w_1']
    batch_norm2d_27_w_2 = self._vars['batch_norm2d_27_w_2']
    batch_norm2d_28_b_0 = self._vars['batch_norm2d_28_b_0']
    batch_norm2d_28_w_0 = self._vars['batch_norm2d_28_w_0']
    batch_norm2d_28_w_1 = self._vars['batch_norm2d_28_w_1']
    batch_norm2d_28_w_2 = self._vars['batch_norm2d_28_w_2']
    batch_norm2d_3_b_0 = self._vars['batch_norm2d_3_b_0']
    batch_norm2d_3_w_0 = self._vars['batch_norm2d_3_w_0']
    batch_norm2d_3_w_1 = self._vars['batch_norm2d_3_w_1']
    batch_norm2d_3_w_2 = self._vars['batch_norm2d_3_w_2']
    batch_norm2d_4_b_0 = self._vars['batch_norm2d_4_b_0']
    batch_norm2d_4_w_0 = self._vars['batch_norm2d_4_w_0']
    batch_norm2d_4_w_1 = self._vars['batch_norm2d_4_w_1']
    batch_norm2d_4_w_2 = self._vars['batch_norm2d_4_w_2']
    batch_norm2d_5_b_0 = self._vars['batch_norm2d_5_b_0']
    batch_norm2d_5_w_0 = self._vars['batch_norm2d_5_w_0']
    batch_norm2d_5_w_1 = self._vars['batch_norm2d_5_w_1']
    batch_norm2d_5_w_2 = self._vars['batch_norm2d_5_w_2']
    batch_norm2d_6_b_0 = self._vars['batch_norm2d_6_b_0']
    batch_norm2d_6_w_0 = self._vars['batch_norm2d_6_w_0']
    batch_norm2d_6_w_1 = self._vars['batch_norm2d_6_w_1']
    batch_norm2d_6_w_2 = self._vars['batch_norm2d_6_w_2']
    batch_norm2d_7_b_0 = self._vars['batch_norm2d_7_b_0']
    batch_norm2d_7_w_0 = self._vars['batch_norm2d_7_w_0']
    batch_norm2d_7_w_1 = self._vars['batch_norm2d_7_w_1']
    batch_norm2d_7_w_2 = self._vars['batch_norm2d_7_w_2']
    batch_norm2d_8_b_0 = self._vars['batch_norm2d_8_b_0']
    batch_norm2d_8_w_0 = self._vars['batch_norm2d_8_w_0']
    batch_norm2d_8_w_1 = self._vars['batch_norm2d_8_w_1']
    batch_norm2d_8_w_2 = self._vars['batch_norm2d_8_w_2']
    batch_norm2d_9_b_0 = self._vars['batch_norm2d_9_b_0']
    batch_norm2d_9_w_0 = self._vars['batch_norm2d_9_w_0']
    batch_norm2d_9_w_1 = self._vars['batch_norm2d_9_w_1']
    batch_norm2d_9_w_2 = self._vars['batch_norm2d_9_w_2']
    conv2d_0_w_0 = self._vars['conv2d_0_w_0']
    conv2d_1_w_0 = self._vars['conv2d_1_w_0']
    conv2d_10_w_0 = self._vars['conv2d_10_w_0']
    conv2d_11_w_0 = self._vars['conv2d_11_w_0']
    conv2d_12_w_0 = self._vars['conv2d_12_w_0']
    conv2d_13_w_0 = self._vars['conv2d_13_w_0']
    conv2d_14_w_0 = self._vars['conv2d_14_w_0']
    conv2d_15_w_0 = self._vars['conv2d_15_w_0']
    conv2d_16_w_0 = self._vars['conv2d_16_w_0']
    conv2d_17_w_0 = self._vars['conv2d_17_w_0']
    conv2d_18_w_0 = self._vars['conv2d_18_w_0']
    conv2d_19_w_0 = self._vars['conv2d_19_w_0']
    conv2d_2_w_0 = self._vars['conv2d_2_w_0']
    conv2d_20_w_0 = self._vars['conv2d_20_w_0']
    conv2d_21_w_0 = self._vars['conv2d_21_w_0']
    conv2d_22_w_0 = self._vars['conv2d_22_w_0']
    conv2d_23_w_0 = self._vars['conv2d_23_w_0']
    conv2d_24_w_0 = self._vars['conv2d_24_w_0']
    conv2d_25_w_0 = self._vars['conv2d_25_w_0']
    conv2d_26_w_0 = self._vars['conv2d_26_w_0']
    conv2d_27_w_0 = self._vars['conv2d_27_w_0']
    conv2d_28_w_0 = self._vars['conv2d_28_w_0']
    conv2d_3_w_0 = self._vars['conv2d_3_w_0']
    conv2d_4_w_0 = self._vars['conv2d_4_w_0']
    conv2d_5_w_0 = self._vars['conv2d_5_w_0']
    conv2d_6_w_0 = self._vars['conv2d_6_w_0']
    conv2d_7_w_0 = self._vars['conv2d_7_w_0']
    conv2d_8_w_0 = self._vars['conv2d_8_w_0']
    conv2d_9_w_0 = self._vars['conv2d_9_w_0']
    conv2d_29_tmp_0 = self.n_p2o_Conv_0(x)
    batch_norm_0_tmp_2 = self.n_p2o_BatchNormalization_0(conv2d_29_tmp_0)
    relu_0_tmp_0 = F.relu(batch_norm_0_tmp_2)
    conv2d_30_tmp_0 = self.n_p2o_Conv_1(relu_0_tmp_0)
    batch_norm_1_tmp_2 = self.n_p2o_BatchNormalization_1(conv2d_30_tmp_0)
    relu_1_tmp_0 = F.relu(batch_norm_1_tmp_2)
    conv2d_31_tmp_0 = self.n_p2o_Conv_2(relu_1_tmp_0)
    batch_norm_2_tmp_2 = self.n_p2o_BatchNormalization_2(conv2d_31_tmp_0)
    relu_2_tmp_0 = F.relu(batch_norm_2_tmp_2)
    depthwise_conv2d_0_tmp_0 = self.n_p2o_Conv_3(relu_2_tmp_0)
    batch_norm_3_tmp_2 = self.n_p2o_BatchNormalization_3(depthwise_conv2d_0_tmp_0)
    conv2d_32_tmp_0 = self.n_p2o_Conv_4(batch_norm_3_tmp_2)
    batch_norm_4_tmp_2 = self.n_p2o_BatchNormalization_4(conv2d_32_tmp_0)
    relu_3_tmp_0 = F.relu(batch_norm_4_tmp_2)
    conv2d_33_tmp_0 = self.n_p2o_Conv_5(relu_3_tmp_0)
    batch_norm_5_tmp_2 = self.n_p2o_BatchNormalization_5(conv2d_33_tmp_0)
    relu_4_tmp_0 = F.relu(batch_norm_5_tmp_2)
    conv2d_34_tmp_0 = self.n_p2o_Conv_6(relu_4_tmp_0)
    batch_norm_6_tmp_2 = self.n_p2o_BatchNormalization_6(conv2d_34_tmp_0)
    relu_5_tmp_0 = F.relu(batch_norm_6_tmp_2)
    p2o_AveragePool_1 = self.n_p2o_AveragePool_0(relu_2_tmp_0)[:, :, :, :]
    p2o_Concat_1 = torch.cat((p2o_AveragePool_1, relu_3_tmp_0, relu_4_tmp_0, relu_5_tmp_0), **{'dim': 1})
    conv2d_35_tmp_0 = self.n_p2o_Conv_7(p2o_Concat_1)
    batch_norm_7_tmp_2 = self.n_p2o_BatchNormalization_7(conv2d_35_tmp_0)
    relu_6_tmp_0 = F.relu(batch_norm_7_tmp_2)
    conv2d_36_tmp_0 = self.n_p2o_Conv_8(relu_6_tmp_0)
    batch_norm_8_tmp_2 = self.n_p2o_BatchNormalization_8(conv2d_36_tmp_0)
    relu_7_tmp_0 = F.relu(batch_norm_8_tmp_2)
    conv2d_37_tmp_0 = self.n_p2o_Conv_9(relu_7_tmp_0)
    batch_norm_9_tmp_2 = self.n_p2o_BatchNormalization_9(conv2d_37_tmp_0)
    relu_8_tmp_0 = F.relu(batch_norm_9_tmp_2)
    conv2d_38_tmp_0 = self.n_p2o_Conv_10(relu_8_tmp_0)
    batch_norm_10_tmp_2 = self.n_p2o_BatchNormalization_10(conv2d_38_tmp_0)
    relu_9_tmp_0 = F.relu(batch_norm_10_tmp_2)
    concat_1_tmp_0 = torch.cat((relu_6_tmp_0, relu_7_tmp_0, relu_8_tmp_0, relu_9_tmp_0), **{'dim': 1})
    conv2d_39_tmp_0 = self.n_p2o_Conv_11(concat_1_tmp_0)
    batch_norm_11_tmp_2 = self.n_p2o_BatchNormalization_11(conv2d_39_tmp_0)
    relu_10_tmp_0 = F.relu(batch_norm_11_tmp_2)
    depthwise_conv2d_1_tmp_0 = self.n_p2o_Conv_12(relu_10_tmp_0)
    batch_norm_12_tmp_2 = self.n_p2o_BatchNormalization_12(depthwise_conv2d_1_tmp_0)
    conv2d_40_tmp_0 = self.n_p2o_Conv_13(batch_norm_12_tmp_2)
    batch_norm_13_tmp_2 = self.n_p2o_BatchNormalization_13(conv2d_40_tmp_0)
    relu_11_tmp_0 = F.relu(batch_norm_13_tmp_2)
    conv2d_41_tmp_0 = self.n_p2o_Conv_14(relu_11_tmp_0)
    batch_norm_14_tmp_2 = self.n_p2o_BatchNormalization_14(conv2d_41_tmp_0)
    relu_12_tmp_0 = F.relu(batch_norm_14_tmp_2)
    conv2d_42_tmp_0 = self.n_p2o_Conv_15(relu_12_tmp_0)
    batch_norm_15_tmp_2 = self.n_p2o_BatchNormalization_15(conv2d_42_tmp_0)
    relu_13_tmp_0 = F.relu(batch_norm_15_tmp_2)
    p2o_AveragePool_3 = self.n_p2o_AveragePool_2(relu_10_tmp_0)[:, :, :, :]
    p2o_Concat_5 = torch.cat((p2o_AveragePool_3, relu_11_tmp_0, relu_12_tmp_0, relu_13_tmp_0), **{'dim': 1})
    conv2d_43_tmp_0 = self.n_p2o_Conv_16(p2o_Concat_5)
    batch_norm_16_tmp_2 = self.n_p2o_BatchNormalization_16(conv2d_43_tmp_0)
    relu_14_tmp_0 = F.relu(batch_norm_16_tmp_2)
    conv2d_44_tmp_0 = self.n_p2o_Conv_17(relu_14_tmp_0)
    batch_norm_17_tmp_2 = self.n_p2o_BatchNormalization_17(conv2d_44_tmp_0)
    relu_15_tmp_0 = F.relu(batch_norm_17_tmp_2)
    conv2d_45_tmp_0 = self.n_p2o_Conv_18(relu_15_tmp_0)
    batch_norm_18_tmp_2 = self.n_p2o_BatchNormalization_18(conv2d_45_tmp_0)
    relu_16_tmp_0 = F.relu(batch_norm_18_tmp_2)
    conv2d_46_tmp_0 = self.n_p2o_Conv_19(relu_16_tmp_0)
    batch_norm_19_tmp_2 = self.n_p2o_BatchNormalization_19(conv2d_46_tmp_0)
    relu_17_tmp_0 = F.relu(batch_norm_19_tmp_2)
    concat_3_tmp_0 = torch.cat((relu_14_tmp_0, relu_15_tmp_0, relu_16_tmp_0, relu_17_tmp_0), **{'dim': 1})
    conv2d_47_tmp_0 = self.n_p2o_Conv_20(concat_3_tmp_0)
    batch_norm_20_tmp_2 = self.n_p2o_BatchNormalization_20(conv2d_47_tmp_0)
    relu_18_tmp_0 = F.relu(batch_norm_20_tmp_2)
    depthwise_conv2d_2_tmp_0 = self.n_p2o_Conv_21(relu_18_tmp_0)
    batch_norm_21_tmp_2 = self.n_p2o_BatchNormalization_21(depthwise_conv2d_2_tmp_0)
    conv2d_48_tmp_0 = self.n_p2o_Conv_22(batch_norm_21_tmp_2)
    batch_norm_22_tmp_2 = self.n_p2o_BatchNormalization_22(conv2d_48_tmp_0)
    relu_19_tmp_0 = F.relu(batch_norm_22_tmp_2)
    conv2d_49_tmp_0 = self.n_p2o_Conv_23(relu_19_tmp_0)
    batch_norm_23_tmp_2 = self.n_p2o_BatchNormalization_23(conv2d_49_tmp_0)
    relu_20_tmp_0 = F.relu(batch_norm_23_tmp_2)
    conv2d_50_tmp_0 = self.n_p2o_Conv_24(relu_20_tmp_0)
    batch_norm_24_tmp_2 = self.n_p2o_BatchNormalization_24(conv2d_50_tmp_0)
    relu_21_tmp_0 = F.relu(batch_norm_24_tmp_2)
    p2o_AveragePool_5 = self.n_p2o_AveragePool_4(relu_18_tmp_0)[:, :, :, :]
    p2o_Concat_9 = torch.cat((p2o_AveragePool_5, relu_19_tmp_0, relu_20_tmp_0, relu_21_tmp_0), **{'dim': 1})
    conv2d_51_tmp_0 = self.n_p2o_Conv_25(p2o_Concat_9)
    batch_norm_25_tmp_2 = self.n_p2o_BatchNormalization_25(conv2d_51_tmp_0)
    relu_22_tmp_0 = F.relu(batch_norm_25_tmp_2)
    conv2d_52_tmp_0 = self.n_p2o_Conv_26(relu_22_tmp_0)
    batch_norm_26_tmp_2 = self.n_p2o_BatchNormalization_26(conv2d_52_tmp_0)
    relu_23_tmp_0 = F.relu(batch_norm_26_tmp_2)
    conv2d_53_tmp_0 = self.n_p2o_Conv_27(relu_23_tmp_0)
    batch_norm_27_tmp_2 = self.n_p2o_BatchNormalization_27(conv2d_53_tmp_0)
    relu_24_tmp_0 = F.relu(batch_norm_27_tmp_2)
    conv2d_54_tmp_0 = self.n_p2o_Conv_28(relu_24_tmp_0)
    batch_norm_28_tmp_2 = self.n_p2o_BatchNormalization_28(conv2d_54_tmp_0)
    relu_25_tmp_0 = F.relu(batch_norm_28_tmp_2)
    concat_5_tmp_0 = torch.cat((relu_22_tmp_0, relu_23_tmp_0, relu_24_tmp_0, relu_25_tmp_0), **{'dim': 1})
    return relu_0_tmp_0, relu_1_tmp_0, concat_1_tmp_0, concat_3_tmp_0, concat_5_tmp_0

  def compatible_auto_pad(self, input, kernel_spatial_shape, nn_mod, auto_pad=None, **kwargs):
    input_spatial_shape = input.shape[2:]
    d = len(input_spatial_shape)
    strides = nn_mod.stride
    dilations = nn_mod.dilation
    output_spatial_shape = [math.ceil(float(l) / float(r)) for l, r in zip(input.shape[2:], strides)]
    pt_padding = [0] * 2 * d
    pad_shape = [0] * d
    for i in range(d):
      pad_shape[i] = (output_spatial_shape[i] - 1) * strides[i] + ((kernel_spatial_shape[i] - 1) * dilations[i] + 1) - input_spatial_shape[i]
      mean = pad_shape[i] // 2
      if auto_pad == b"SAME_UPPER":
        l, r = pad_shape[i] - mean, mean
      else:
        l, r = mean, pad_shape[i] - mean
      pt_padding.insert(0, r)
      pt_padding.insert(0, l)
    return F.pad(input, pt_padding)

@torch.no_grad()
def test_run_model(inputs=[torch.from_numpy(np.random.randn(*[1, 3, 512, 1024]).astype(np.float32))]):
  model = Model()
  model.eval()
  rs = model(*inputs)
  print(rs)
  return rs
